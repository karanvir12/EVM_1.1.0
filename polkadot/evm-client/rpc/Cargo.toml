[package]
name = "fc-rpc"
version = "2.0.0-dev"
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
description = "Ethereum RPC (web3) compatibility layer for Substrate."


[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
ethereum = { version = "0.14.0", features = ["with-codec"] }
ethereum-types = {version = "0.14.1",default-features = false  }
evm = { git = "https://github.com/rust-blockchain/evm", rev = "b7b82c7e1fc57b7449d6dfa6826600de37cc1e65", default-features = false }
futures = "0.3.28"

hex = { version = "0.4.3", default-features = false, features = ["alloc"] }
jsonrpsee = {version = "0.16.3", features = ["server", "macros"] }
libsecp256k1 = { version = "0.7.1", default-features = false }
log = { version = "0.4.20", default-features = false }
prometheus = { version = "0.13.1", default-features = false }
rand = "0.8"
rlp = { version = "0.5.2", default-features = false }
scale-codec = { package = "parity-scale-codec", version = "3.6.4", default-features = false, features = ["derive"] }

schnellru = "0.2.1"
serde = { version = "1.0", default-features = false, features = ["derive", "alloc"] }
thiserror = "1.0"
tokio = { version = "1.32.0", features = ["sync"] }

# Substrate
prometheus-endpoint = { package = "substrate-prometheus-endpoint",path = "../../../substrate/utils/prometheus" }
sc-client-api = {path = "../../../substrate/client/api" }
sc-consensus-aura = {path = "../../../substrate/client/consensus/aura" }
sc-network = {path = "../../../substrate/client/network" }
sc-network-common = {path = "../../../substrate/client/network/common" }
sc-network-sync = {path = "../../../substrate/client/network/sync" }
sc-rpc = {path = "../../../substrate/client/rpc" }
sc-service = {path = "../../../substrate/client/service", default-features = false }
sc-transaction-pool = {path = "../../../substrate/client/transaction-pool" }
sc-transaction-pool-api = {path = "../../../substrate/client/transaction-pool/api" }
sc-utils = {path = "../../../substrate/client/utils" }


sp-api = {path = "../../../substrate/primitives/api", default-features = false }
sp-block-builder = {path = "../../../substrate/primitives/block-builder", default-features = false }
sp-blockchain = {path = "../../../substrate/primitives/blockchain" }
sp-consensus = {path = "../../../substrate/primitives/consensus/common" }
sp-consensus-aura = {path = "../../../substrate/primitives/consensus/aura", default-features = false }
sp-core = {path = "../../../substrate/primitives/core" }
sp-inherents = {path = "../../../substrate/primitives/inherents", default-features = false }
sp-io = { path = "../../../substrate/primitives/io", default-features = false }
sp-runtime = {path = "../../../substrate/primitives/runtime", default-features = false }
sp-state-machine = { path = "../../../substrate/primitives/state-machine", default-features = false }
sp-storage = { path = "../../../substrate/primitives/storage", default-features = false }
sp-timestamp = { path = "../../../substrate/primitives/timestamp", default-features = false }
# Frontier
fc-api = { path = "../api"}
fc-mapping-sync = { path = "../mapping-sync" }	
fc-rpc-core = { version = "1.1.0-dev", path = "../../evm-client/rpc-core" }
fc-storage = { version = "1.0.0-dev" ,path ="../storage"}
fp-evm = { version = "3.0.0-dev", path = "../../evm-primitives/evm", default-features = false }
fp-rpc = { version = "3.0.0-dev", path = "../../evm-primitives/rpc",features= ["default"] }
fp-storage = { version = "2.0.0", path = "../../evm-primitives/storage",features= ["default"] }
pallet-evm = { version="6.0.0-dev", path = "../../evm-frame/evm", default-features = false }	

[dev-dependencies]
tempfile = "3.8.0"
# Substrate
sc-block-builder = {path = "../../../substrate/client/block-builder" }
sc-client-db = {path = "../../../substrate/client/db", features = ["rocksdb"] }
sp-consensus = {path = "../../../substrate/primitives/consensus/common" }
substrate-test-runtime-client = {path = "../../../substrate/test-utils/runtime/client" }
# Frontier
fc-db = { path = "../db" }

[features]
default = ["rocksdb"]
rocksdb = [
	"sc-service/rocksdb",
	"fc-db/rocksdb",
	"fc-mapping-sync/rocksdb",
]
txpool = ["fc-rpc-core/txpool"]
rpc-binary-search-estimate = []
